<script type="text/javascript">

// var game = new Phaser.Game(800, 600, Phaser.AUTO, '', { preload: preload, create: create, update: update });

var GameState = function(game) {
};

GameState.prototype.preload = function() {
  game.load.image('gym', 'images/gym.png');
  game.load.image('player', 'images/player.png');
  game.load.image('basket', 'images/basket.png');
  game.load.image('ball', 'images/ball.png')
  // game.load.image('ground', 'images/platform.png');
  // game.load.image('star', 'images/star.png');
  // game.load.spritesheet('dude', 'images/dude.png', 32, 48);
}

var score = 0;
var scoreText;
var shootKey;


GameState.prototype.create = function() {

  //  We're going to be using physics, so enable the Arcade Physics system
  game.physics.startSystem(Phaser.Physics.ARCADE);

  //  A simple background for our game
  game.add.sprite(0, 0, 'gym');
  game.add.sprite(500, -200, 'basket');

  // //  The platforms group contains the ground and the 2 ledges we can jump on
  // platforms = game.add.group();

  // //  We will enable physics for any object that is created in this group
  // platforms.enableBody = true;

  // // Here we create the ground.
  // var ground = platforms.create(0, game.world.height - 64, 'ground');

  // //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
  // ground.scale.setTo(2, 2);
  this.BALL_SPEED = -400;
  // //  This stops it from falling away when you jump on it
  // ground.body.immovable = true;

  // //  Now let's create two ledges
  // var ledge = platforms.create(400, 400, 'ground');

  // ledge.body.immovable = true;

  // ledge = platforms.create(-150, 250, 'ground');

  // ledge.body.immovable = true;

  //  // The player and its settings
  player = game.add.sprite(32, game.world.height - 300, 'player');

  // //  We need to enable physics on the player
  game.physics.arcade.enable(player);

  // //  Player physics properties. Give the little guy a slight bounce.
  player.body.bounce.y = 0.2;
  player.body.gravity.y = 300;
  player.body.collideWorldBounds = true;

  // //  Our two animations, walking left and right.
  // player.animations.add('left', [0, 1, 2, 3], 10, true);
  // player.animations.add('right', [5, 6, 7, 8], 10, true);

  // // Keyboard input cursors
  cursors = game.input.keyboard.createCursorKeys();

  // stars = game.add.group();

  // stars.enableBody = true;

  // This is working ball drop code
  ball = game.add.sprite(32, 32, 'ball');
  game.physics.arcade.enable(ball);
  ball.enableBody = true;
  ball.body.gravity.y = 100;
  ball.body.bounce.y = 0.7 + Math.random() * 0.2;
  ball.anchor.setTo(0.5, 0.5);
  ball.kill();

  shootKey = game.input.keyboard.addKey(Phaser.Keyboard.ONE);

  // //  Here we'll create 12 of them evenly spaced apart
  // for (var i = 0; i < 12; i++)
  // {
  //     //  Create a star inside of the 'stars' group
  //     var star = stars.create(i * 70, 0, 'star');

  //     //  Let gravity do its thing
  //     star.body.gravity.y = 6;

  //     //  This just gives each star a slightly random bounce value
  //     star.body.bounce.y = 0.7 + Math.random() * 0.2;
  // }

  // scoreText = game.add.text(0, 0, '0', { font: '600px Arial', fill: '#FFF' });
}

GameState.prototype.update = function() {
  //  Collide the player and the stars with the platforms
  // game.physics.arcade.collide(player, platforms);

  //   //  Reset the players velocity (movement)
  player.body.velocity.x = 0;

  if (cursors.left.isDown)
  {
      //  Move to the left
      player.body.velocity.x = -150;

  //     player.animations.play('left');
  }
  else if (cursors.right.isDown)
  {
      //  Move to the right
      player.body.velocity.x = 150;

  //     player.animations.play('right');
  }
  else
  {
      //  Stand still
  //     player.animations.stop();

  //     player.frame = 4;
  }

  //  Allow the player to jump if they are touching the ground.
  if (cursors.up.isDown && player.body.touching.down)
  {
      player.body.velocity.y = -350;
  }
  // game.physics.arcade.collide(stars, platforms);

  // game.physics.arcade.overlap(player, stars, collectStar, null, this);
  // key1.onDown.add(shootBall, this);
  if (shootKey.isDown){
    // alert("Hello!");
    this.shootBall();
  }
}

GameState.prototype.shootBall = function() {
    console.log("I'm shooting a ball!")
    console.log(player.x)

    if (ball === null || ball === undefined) return;

    ball.revive();
    ball.checkWorldBounds = true;
    ball.outOfBoundsKill = true;
    ball.reset(player.x + 200, player.y);
    ball.rotation = -180;
    // // Shoot it in the right direction
    ball.body.velocity.x = Math.cos(ball.rotation) * this.BALL_SPEED;
    ball.body.velocity.y = Math.sin(ball.rotation) * this.BALL_SPEED;
}

// function collectStar (player, star) {

//   // Removes the star from the screen
//   star.kill();

//   //  Add and update the score
//   score += 10;
//   scoreText.text = score;
//   document.getElementById('score').value = score;
// }

var game = new Phaser.Game(800, 600, Phaser.AUTO, 'game');
game.state.add('game', GameState, true);
</script>

<form action="/scores" class="new_score" id="new_score" method="post">
  <input name="authenticity_token" value="<%= form_authenticity_token %>" type="hidden">
  <label for="name">Name</label>:
  <input id="name" name="score[name]" type="text" /><br />

  <input type="hidden" id="score" name="score[score]" value="0">

  <input name="commit" type="submit" value="Submit Score" />
</form>
